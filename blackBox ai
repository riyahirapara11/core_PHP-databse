Certainly! Below is a structured approach to implementing Role-Based Access Control (RBAC) in your existing PHP project using procedural programming with MySQLi. This implementation will focus on best practices such as code reusability, separation of concerns, and minimal redundancy.

### 1. Database Table Structure

You will need to create the following tables in your database:

#### Users Table
```sql
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role_id INT,
    FOREIGN KEY (role_id) REFERENCES roles(id)
);
```

#### Roles Table
```sql
CREATE TABLE roles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);
```

#### Permissions Table
```sql
CREATE TABLE permissions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);
```

#### Role_Permissions Table
```sql
CREATE TABLE role_permissions (
    role_id INT,
    permission_id INT,
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES roles(id),
    FOREIGN KEY (permission_id) REFERENCES permissions(id)
);
```

### 2. PHP Code Structure

#### Directory Structure
```
/project
    /config
        database.php
    /middleware
        authMiddleware.php
    /helpers
        AuthHelper.php
    /index.php
```

#### 2.1 Database Connection (config/database.php)
```php
<?php
$host = 'localhost';
$db = 'your_database';
$user = 'your_user';
$pass = 'your_password';

$connection = new mysqli($host, $user, $pass, $db);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>
```

#### 2.2 Auth Helper (helpers/AuthHelper.php)
```php
<?php
function checkPermission($userId, $action, $connection) {
    // Get user role
    $stmt = $connection->prepare("SELECT role_id FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($roleId);
    $stmt->fetch();
    $stmt->close();

    // Get permissions for the role
    $stmt = $connection->prepare("SELECT p.name FROM permissions p
        JOIN role_permissions rp ON p.id = rp.permission_id
        WHERE rp.role_id = ?");
    $stmt->bind_param("i", $roleId);
    $stmt->execute();
    $result = $stmt->get_result();

    $permissions = [];
    while ($row = $result->fetch_assoc()) {
        $permissions[] = $row['name'];
    }
    $stmt->close();

    return in_array($action, $permissions);
}
?>
```

#### 2.3 Middleware (middleware/authMiddleware.php)
```php
<?php
session_start();

function authMiddleware($requiredRole, $connection) {
    if (!isset($_SESSION['user_id'])) {
        header("Location: login.php");
        exit();
    }

    // Check if user has the required role
    $stmt = $connection->prepare("SELECT role_id FROM users WHERE id = ?");
    $stmt->bind_param("i", $_SESSION['user_id']);
    $stmt->execute();
    $stmt->bind_result($roleId);
    $stmt->fetch();
    $stmt->close();

    // Check if the role matches the required role
    if ($roleId !== $requiredRole) {
        header("HTTP/1.0 403 Forbidden");
        echo "You do not have permission to access this resource.";
        exit();
    }
}
?>
```

### 3. Usage Example

#### 3.1 Index File (index.php)
```php
<?php
include 'config/database.php';
include 'middleware/authMiddleware.php';
include 'helpers/AuthHelper.php';

$action = $_GET['action'] ?? '';

switch ($action) {
    case 'adminPage':
        authMiddleware(1, $connection); // Assuming role_id 1 is Admin
        echo "Welcome to the admin page!";
        break;

    case 'userPage':
        authMiddleware(2, $connection); // Assuming role_id 2 is User
        echo "Welcome to the user page!";
        break;

    default:
        echo "Welcome to the application!";
        break;
}
?>
```

### 4. Best Practices
- **Separation of Concerns**: Each file has a specific responsibility (e.g., database connection, middleware for authentication, helper functions for permission checks).
- **Code Reusability**: Common functions are reused across different parts of the application.
- **Prepared Statements**: Use prepared statements to prevent SQL injection attacks.

### 5. Conclusion
This implementation provides a solid foundation for role-based access control in your PHP application. You can expand upon this by adding more roles, permissions, and refining the logic as needed. Make sure to test thoroughly to ensure that permissions are enforced correctly. If you have any specific questions or need further assistance, feel free to ask!